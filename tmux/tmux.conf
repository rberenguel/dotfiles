# -----------------------------------------------------------------------------
# -- Catppuccin (Mocha) Colors
# -----------------------------------------------------------------------------
set -gq @thm_bg "#1e1e2e"
set -gq @thm_fg "#cdd6f4"
set -gq @thm_cyan "#89dceb"
set -gq @thm_green "#a6e3a1"
set -gq @thm_orange "#fab387"
set -gq @thm_pink "#f5c2e7"
set -gq @thm_red "#f38ba8"
set -gq @thm_blue "#89b4fa"
set -gq @thm_mauve "#cba6f7"
set -gq @thm_status_bg "#552a36" # This has to match the color for notif

set -gq @thm_surface_0 "#313244"
set -gq @thm_surface_1 "#45475a"
set -gq @thm_surface_2 "#585b70"
set -gq @thm_crust "#11111b"

# -----------------------------------------------------------------------------
# -- General
# -----------------------------------------------------------------------------


# Set Ctrl+p as the new prefix
unbind C-b
set-option -g prefix C-p
bind-key C-p send-prefix

# Set the refresh interval for the status bar
set -g status-interval 1

# General appearance
set -g default-terminal "screen-256color" # Enable 256-color support
set -g history-limit 10000 # Increase scrollback history
set -g popup-border-lines "rounded"

# Set the style for standard messages (e.g., errors)
set -g message-style "fg=#{@thm_fg},bg=#{@thm_status_bg}"

# Set the style for the command prompt (prefix + :)
set -g message-command-style "fg=#{@thm_fg},bg=#{@thm_status_bg}"

# Better to have a custom clock, and a couple fancy "screensavers".
# Gemini is pretty good at creating these.

bind C display-popup -w 100% -h 100% "while true; do clear; echo '\n\n\n\n\n\n\n\n'; date +'%H:%M:%S' | figlet -f doh -ck -w \"\$COLUMNS\"; sleep 1; done"
bind M display-popup -w 100% -h 100% "~/tmux-matrix.awk"
bind P display-popup -w 100% -h 100% "~/tmux-mondrian.awk"

# Status bar
set -g status-position bottom # Position status bar at the bottom
set -g status-interval 1 # Update status bar every second
set -g status-justify left # Align window names to the left

# Colors
#set -g status-bg '#282a36' # Dracula background
#set -g status-fg '#f8f8f2' # Dracula foreground
set -g status-style "bg=#{@thm_bg},fg=#{@thm_fg}"
set -g pane-border-style fg="#{@thm_surface_2}"
set -g pane-active-border-style fg="#{@thm_red}"

# Mouse support
set -g mouse on
#set -g mouse-resize-pane on
bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -n DoubleClick1Status choose-tree
bind-key -n MouseDown3Status choose-tree

# Toggle mouse support with prefix + m
bind m if-shell "[ '#{?mouse,on,off}' = 'on' ]" \
    'set-option -g mouse off; display-message "Mouse: off"' \
    'set-option -g mouse on; display-message "Mouse: on"'

# Mouse wheel bindings for scrolling
bind -n WheelUpPane { if -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' { send -M } { if -F '#{alternate_on}' { send-keys -N 3 Up } { copy-mode -e } } }
bind -n WheelDownPane { if -F '#{||:#{pane_in_mode},#{mouse_any_flag}}' { send -M } { if -F '#{alternate_on}' { send-keys -N 3 Down} } }

# Left status section (session name)
set -g status-left-length 30
set -g status-left '#[fg=#{@thm_bg},bg=#{@thm_mauve},bold] #S #[fg=#{@thm_mauve},bg=#{?window_start_flag,#{@thm_surface_1},#{@thm_bg}},nobold]ÓÇ∞'

# Window list (center status)
set-option -g automatic-rename on
set-option -g automatic-rename-format '#(cd #{pane_current_path}; if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then basename "$(git rev-parse --show-toplevel)"; else basename"#{pane_current_path}"; fi)'
set -g window-status-current-style fg='#{@thm_fg}',bg='#{@thm_surface_1}',bold
set -g window-status-current-format ' #I:#W#F '
set -g window-status-style "fg=#{@thm_fg},bg=#{@thm_bg}"
set -g window-status-format ' #I:#W#F '

# Automatic renumbering of windows on closure
set-option -g renumber-windows on

# Right status section (host, date, time)
set -g status-right-length 100
set -g status-right '#[fg=#{@thm_surface_1},bg=#{@thm_bg},nobold]ÓÇ≤#[fg=#{@thm_fg},bg=#{@thm_surface_1}] #(cd #{pane_current_path}; if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then echo "$(basename "$(git rev-parse --show-toplevel)")/$(git rev-parse --abbrev-ref HEAD)"; else echo "(no repo)"; fi) | #{?mouse,üê≠,} #[fg=#{@thm_mauve},bg=#{@thm_surface_1},nobold]ÓÇ≤#[fg=#{@thm_bg},bg=#{@thm_mauve},bold] #(TZ="Europe/Zurich" date +%%H:%%M) %d-%b-%y '

# Pane titles
# set-option -g pane-border-status top
# set-option -g pane-border-format " #[#{?pane_active,fg=#bd93f9,fg=#44475a}]#{pane_index}:#{b:pane_current_path} "

# Pane splitting
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Disable automatic window renaming
set-option -g allow-rename off

# Custom pane navigation (Colemak friendly)
bind n select-pane -L
bind o select-pane -R
bind i select-pane -U
bind e select-pane -D

# Window navigation
bind , previous-window
bind . next-window

# Rename window
bind-key r command-prompt "rename-window '%%'"



############

bind t display-popup \
  -d "#{pane_current_path}" \
  -w 75% \
  -h 75% \
  -E "zsh"


bind d display-menu -T "#[align=centre]Dotfiles" -x C -y C \
  ".zshrc"            z  "display-popup -E 'vim ~/.zshrc'" \
  ".vimrc"            v  "display-popup -E 'vim ~/.vimrc'" \
  ".tmux.conf"        t  "display-popup -E 'vim ~/.tmux.conf'" \
  "dotfiles"          g  "display-popup -d '/Users/ruben/code/dotfiles' -E 'zsh'" \
  "Exit"              q  ""

unbind p
bind C-p run-shell "~/tmux-actions.py #{pane_current_path}"

bind-key g run-shell "~/tmux-actions.py --github #{pane_current_path}"

set -s set-clipboard on
set -as terminal-features ',rxvt-unicode-256color:clipboard'

# Example binding in tmux.conf
bind-key u run-shell "python3 /Users/ruben/code/dotfiles/tmux/uhm/tmux-uhm.py parse /Users/ruben/code/dotfiles/tmux/uhm/rules.py '#{pane_current_path}'"

# Fake typing
bind -Troot C-t switch-client -Tfaketyping

sample_text="Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
bind -Tfaketyping 1 "run-shell '~/tmux-slow-type.awk -v text=\"$sample_text\"'"

# Prepare a notification command to the current pane once the previous command finishes
bind -Tfaketyping n send-keys ' ; notif $? "ok" "nok"'
